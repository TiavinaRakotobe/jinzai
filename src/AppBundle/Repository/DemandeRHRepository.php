<?php

namespace AppBundle\Repository;

use AppBundle\Form\Search\DemandeRhSearch,
    AppBundle\Constants\GestionCongeConstant;

/**
 * DemandeRHRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DemandeRHRepository extends \Doctrine\ORM\EntityRepository
{

    public function listeDemandeByCriteria(DemandeRhSearch $demandeRhSearch = null, $extraParams = null, $isQueryToReturn = true)
    {
        $clauseWhere = '';
        $params = array();
        $qb = $this->createQueryBuilder('D');
        $qb->add('select', 'D');
        $qb->add('from', 'AppBundle:DemandeRH D');
        $qb->leftJoin('AppBundle:TypeConge', 'T', 'WITH', 'D.typeDemande = T.id');
        $qb->leftJoin('AdminUserBundle:Utilisateur', 'UD', 'WITH', 'D.demandor = UD.id');
        $clauseWhere .= 'T.imputationType=' . GestionCongeConstant::DEMANDE_RH;

        //check demandor
        if ($demandeRhSearch && $demandeRhSearch->getDemandor() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " UD.id = :demandor ";
            $params['demandor'] = $demandeRhSearch->getDemandor();
        }

        //check date dÃ©but
        if ($demandeRhSearch && $demandeRhSearch->getFromDate() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " D.fromDate >= :fromDate ";
            $params['fromDate'] = $demandeRhSearch->getFromDate();
        }

        //check date fin
        if ($demandeRhSearch && $demandeRhSearch->getToDate() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " D.toDate <= :toDate ";
            $params['toDate'] = $demandeRhSearch->getToDate();
        }
        if ($demandeRhSearch && $demandeRhSearch->getDemandeStatus() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " D.demandeRhStatus = :demandeStatus ";
            $params['demandeStatus'] = $demandeRhSearch->getDemandeStatus();
        }

        if ($clauseWhere != '') {
            $qb->add('where', $clauseWhere);
        }

        if (count($params) > 0) {
            //set all query parameters
            foreach ($params as $field => $values) {
                $qb->setParameter($field, $values);
            }
        }
        //if sort field exists
        if (isset($extraParams->sortField) && !is_null($extraParams->sortField) && $extraParams->sortField != '') {
            $qb->orderBy($extraParams->sortField, $extraParams->sortDirection);
        }

        $query = $qb->getQuery();
        /* print_r(array('sql' => $query->getSQL(), 'params' => $query->getParameters()));
          die; */
        //$result = $query->getResult();

        return $isQueryToReturn ? $query : $query->getResult();
    }

}
