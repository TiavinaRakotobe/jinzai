<?php

namespace AppBundle\Repository;

use AppBundle\Form\Search\DemandeHistoryValidationSearch,
    AppBundle\Constants\GestionCongeConstant;

/**
 * DemandeHistoryValidationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DemandeHistoryValidationRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * list history demande validation by criteria
     * @param DemandeHistoryValidationSearch $historyValidationSearchSearch
     * @param type $extraParams
     *
     * @return type
     */
    public function listeDemandeByCriteria(DemandeHistoryValidationSearch $historyValidationSearch, $extraParams = null, $isQueryToReturn = true)
    {
        $params = array();
        $clauseWhere = '';
        $qb = $this->createQueryBuilder('V');
        $qb->add('select', 'V');
        $qb->add('from', 'AppBundle:DemandeHistoryValidation V');
        $qb->leftJoin('AppBundle:DemandeConge', 'D', 'WITH', 'V.demandeConge = D.id');
        //check if currentUser is in interim validation for some demande
        $qb->leftJoin('AppBundle:Interim', 'I', 'WITH', 'I.demandeConge = V.demandeConge AND I.interimType = ' . GestionCongeConstant::INTERIM_TYPE_VALIDATION . ' AND I.enabled = 1');
        $qb->leftJoin('AppBundle:TypeConge', 'T', 'WITH', 'D.typeConge = T.id');
        $qb->leftJoin('AdminUserBundle:Utilisateur', 'UI', 'WITH', 'D.initiator = UI.id');
        $qb->leftJoin('AdminUserBundle:Utilisateur', 'UD', 'WITH', 'D.demandor = UD.id');
        $qb->leftJoin('AppBundle:Direction', 'DR', 'WITH', 'UD.direction = DR.id');
        $qb->where(' 1 = 1 ');
		
        $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
        $clauseWhere .= " V.validationStatus = 0 ";
		
        //check numero
        if ($historyValidationSearch && $historyValidationSearch->getNumero() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " D.numero LIKE :numero ";
            $params['numero'] = '%' . $historyValidationSearch->getNumero() . '%';
        }

        //check matricule
        if ($historyValidationSearch && $historyValidationSearch->getMatricule() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " UD.matricule = :matricule ";
            $params['matricule'] = $historyValidationSearch->getMatricule();
        }

        //check type conge
        if ($historyValidationSearch && $historyValidationSearch->getTypeConge() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " T.id = :typeConge ";
            $params['typeConge'] = $historyValidationSearch->getTypeConge();
        }

        //check initiator
        if ($historyValidationSearch && $historyValidationSearch->getInitiator() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " UI.id = :initiator ";
            $params['initiator'] = $historyValidationSearch->getInitiator();
        }

        //check demandor
        if ($historyValidationSearch && $historyValidationSearch->getDemandor() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " UD.id = :demandor ";
            $params['demandor'] = $historyValidationSearch->getDemandor();
        }

        //check direction
        if ($historyValidationSearch && $historyValidationSearch->getDirection() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " DR.id = :directionId ";
            $params['directionId'] = $historyValidationSearch->getDirection();
        }

        //check date début
        if ($historyValidationSearch && $historyValidationSearch->getDateStart() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " D.dateStart >= :dateStart ";
            $params['dateStart'] = $historyValidationSearch->getDateStart();
        }

        //check date fin
        if ($historyValidationSearch && $historyValidationSearch->getDateEnd() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " D.dateEnd <= :dateEnd ";
            $params['dateEnd'] = $historyValidationSearch->getDateEnd();
        }

        //liste des demande dont validateur = admin
        if (isset($extraParams->isAdmin) && $extraParams->isAdmin == true) {
            $qb->leftJoin('AppBundle:ModeleWorkflowSteps', 'WS', 'WITH', 'WS.id = V.modeleWorkflowStep');
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= ' WS.validationType = ' . GestionCongeConstant::VALIDATION_RH . ' OR (I.interim = ' . $extraParams->currentUser . ' AND V.validationStatus = 0 )';
        } else {
            //liste des demandes dont validateur = currentUser
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= ' V.validator=' . $extraParams->currentUser;
        }

        //check and get list subordonnées
        if ($extraParams != null && count($extraParams->subordonneesIds) > 0 && (!isset($extraParams->isAdmin) || $extraParams->isAdmin === false)) {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " D.demandor IN (" . $extraParams->subordonneesIds . ") OR I.interim = " . $extraParams->currentUser;
        }
				
        if ($clauseWhere != '') {
            $qb->add('where', $clauseWhere);
        }

        if (count($params) > 0) {
            //set all query parameters
            foreach ($params as $field => $values) {
                $qb->setParameter($field, $values);
            }
        }

        $query = $qb->getQuery();
         /*print_r(array('sql' => $query->getSQL(), 'params' => $query->getParameters()));
          die; 
		*/
        return $isQueryToReturn ? $query : $query->getResult();
    }

    /**
     * liste des demandes en attente de validation
     *
     * @return type
     */
    public function listeDemandeWaintingValidation(DemandeHistoryValidationSearch $demandeHistory, $bReturnRequery = true)
    {
        $clauseWhere = '';
        $qb = $this->createQueryBuilder('V');
        $qb->add('select', 'V');
        $qb->add('from', 'AppBundle:DemandeHistoryValidation V');
        $qb->leftJoin('AppBundle:DemandeConge', 'D', 'WITH', 'V.demandeConge = D.id');
        $qb->leftJoin('AppBundle:TypeConge', 'T', 'WITH', 'D.typeConge = T.id');
        $qb->leftJoin('AdminUserBundle:Utilisateur', 'UI', 'WITH', 'D.initiator = UI.id');
        $qb->leftJoin('AdminUserBundle:Utilisateur', 'UD', 'WITH', 'D.demandor = UD.id');
        $qb->leftJoin('AppBundle:Direction', 'DR', 'WITH', 'UD.direction = DR.id');
        $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
        //si congé payé seulement
        //$clauseWhere .= " V.validationStatus = 0 AND T.imputationType = " . GestionCongeConstant::CONGE_PAYE;
        //$clauseWhere .= " V.validationStatus = 0";
        $commoFilters = $this->prepareCommonFilters($demandeHistory);
        $clauseWhere .= $commoFilters['clauseWhere'];
        $params = $commoFilters['params'];
        if ($clauseWhere != '') {
            $qb->add('where', $clauseWhere);
        }

        if (count($params) > 0) {
            //set all query parameters
            foreach ($params as $field => $values) {
                $qb->setParameter($field, $values);
            }
        }

        $query = $qb->getQuery();
        /* print_r(array('sql' => $query->getSQL(), 'params' => $query->getParameters()));
          die; */

        return $bReturnRequery ? $query : $query->getResult();
    }

    /**
     * prepareCommonFilters
     * @param DemandeHistoryValidationSearch $historyValidationSearch
     *
     * @return type
     */
    private function prepareCommonFilters(DemandeHistoryValidationSearch $historyValidationSearch)
    {
        $clauseWhere = " V.validationStatus = 0 ";
        $params = array();
        //check numero
        if ($historyValidationSearch && $historyValidationSearch->getNumero() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " D.numero LIKE :numero ";
            $params['numero'] = '%' . $historyValidationSearch->getNumero() . '%';
        }

        //check matricule
        if ($historyValidationSearch && $historyValidationSearch->getMatricule() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " UD.matricule = :matricule ";
            $params['matricule'] = $historyValidationSearch->getMatricule();
        }

        //check type conge
        if ($historyValidationSearch && $historyValidationSearch->getTypeConge() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " T.id = :typeConge ";
            $params['typeConge'] = $historyValidationSearch->getTypeConge();
        }

        //check initiator
        if ($historyValidationSearch && $historyValidationSearch->getInitiator() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " UI.id = :initiator ";
            $params['initiator'] = $historyValidationSearch->getInitiator();
        }

        //check demandor
        if ($historyValidationSearch && $historyValidationSearch->getDemandor() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " UD.id = :demandor ";
            $params['demandor'] = $historyValidationSearch->getDemandor();
        }

        //check direction
        if ($historyValidationSearch && $historyValidationSearch->getDirection() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " DR.id = :directionId ";
            $params['directionId'] = $historyValidationSearch->getDirection();
        }

        //check date début
        if ($historyValidationSearch && $historyValidationSearch->getDateStart() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " D.dateStart >= :dateStart ";
            $params['dateStart'] = $historyValidationSearch->getDateStart();
        }

        //check date fin
        if ($historyValidationSearch && $historyValidationSearch->getDateEnd() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " D.dateEnd <= :dateEnd ";
            $params['dateEnd'] = $historyValidationSearch->getDateEnd();
        }

        return array('clauseWhere' => $clauseWhere, 'params' => $params);
    }

}
