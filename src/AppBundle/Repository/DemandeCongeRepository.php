<?php

namespace AppBundle\Repository;

use AppBundle\Form\Search\DemandeCongeSearch,
    AppBundle\Constants\GestionCongeConstant;

/**
 * DemandeCongeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DemandeCongeRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * get next increment number of demande conge by direction
     * @param type $zYearAndDirection
     *
     * @return integer
     */
    public function getNextIncrementNumber($zYearAndDirection)
    {
        $zSql = 'SELECT MAX(increment_numnber) FROM `demande_conge` WHERE numero LIKE "' . $zYearAndDirection . '%"';
        $qb = $this->getEntityManager()->getConnection()->prepare($zSql);
        $qb->execute();
        $result = $qb->fetchAll(\PDO::FETCH_COLUMN);

        return $result[0] ? $result[0] + 1 : 1;
    }

    /**
     * check chevauchement date demande de congé
     * @param type $dateStart
     * @param type $dateEnd
     * @param type $demandorId
     *
     * @return type
     */
    public function checkChevauchementDate($dateStart, $dateEnd, $demandorId)
    {
        $zSql = "SELECT * FROM `demande_conge` WHERE `demandor_id` = " . $demandorId . " AND ((DATE(`date_start`) BETWEEN '" . $dateStart . "' AND '" . $dateEnd . "' OR DATE(`date_end`) BETWEEN '" . $dateStart . "' AND '" . $dateEnd . "') OR (DATE(`date_start`)<='" . $dateStart . "' AND DATE(`date_end`) >='" . $dateEnd . "'));";
        $query = $this->getEntityManager()->getConnection()->prepare($zSql);
        $query->execute();
        $result = $query->fetchAll();

        return $result;
    }

    /**
     * list demande by criteria
     * @param DemandeCongeSearch $demandeCongeSearch
     * @param type $extraParams
     * @param type $isQueryToReturn
     *
     * @return array
     */
    public function listeDemandeCongeByCriteria(DemandeCongeSearch $demandeCongeSearch = null, $extraParams = null, $isQueryToReturn = true)
    {
        $clauseWhere = '';
        $params = array();
        $qb = $this->createQueryBuilder('D');
        $qb->add('select', 'D');
        $qb->add('from', 'AppBundle:DemandeConge D');
        $qb->leftJoin('AppBundle:TypeConge', 'T', 'WITH', 'D.typeConge = T.id');
        $qb->leftJoin('AdminUserBundle:Utilisateur', 'UI', 'WITH', 'D.initiator = UI.id');
        $qb->leftJoin('AdminUserBundle:Utilisateur', 'UD', 'WITH', 'D.demandor = UD.id');
        $qb->leftJoin('AppBundle:Direction', 'DR', 'WITH', 'UD.direction = DR.id');
        $qb->where(' 1=1 ');
		
        //check numero
        if ($demandeCongeSearch && $demandeCongeSearch->getNumero() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " D.numero LIKE :numero ";
            $params['numero'] = '%' . trim($demandeCongeSearch->getNumero()) . '%';
        }

        //check matricule
        if ($demandeCongeSearch && $demandeCongeSearch->getMatricule() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " UD.matricule = :matricule ";
            $params['matricule'] = trim($demandeCongeSearch->getMatricule());
        }

        //check type conge
        if ($demandeCongeSearch && $demandeCongeSearch->getTypeConge() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " T.id = :typeConge ";
            $params['typeConge'] = $demandeCongeSearch->getTypeConge();
        }
        //check initiator
        if ($demandeCongeSearch && $demandeCongeSearch->getInitiator() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " UI.id = :initiator ";
            $params['initiator'] = $demandeCongeSearch->getInitiator();
        }

        //check demandor
        if ($demandeCongeSearch && $demandeCongeSearch->getDemandor() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " UD.id = :demandor ";
            $params['demandor'] = $demandeCongeSearch->getDemandor();
        }

        //check direction
        if ($demandeCongeSearch && $demandeCongeSearch->getDirection() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " DR.id = :directionId ";
            $params['directionId'] = $demandeCongeSearch->getDirection();
        }

        //check date début
        if ($demandeCongeSearch && $demandeCongeSearch->getDateStart() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " D.dateStart >= :dateStart ";
            $params['dateStart'] = $demandeCongeSearch->getDateStart();
        }

        //check date fin
        if ($demandeCongeSearch && $demandeCongeSearch->getDateEnd() != '') {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " D.dateEnd <= :dateEnd ";
            $params['dateEnd'] = $demandeCongeSearch->getDateEnd();
        }
				
        //check demande status
        if ($demandeCongeSearch && (strlen($demandeCongeSearch->getDemandeStatus())>0)) {		
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " D.demandeStatus = :demandeStatus ";
            $params['demandeStatus'] = $demandeCongeSearch->getDemandeStatus();
        }
		
        //check subordonnées if currentUser has not rôle admin
        if (($extraParams != null && isset($extraParams->subordonneesIds) && count($extraParams->subordonneesIds) > 0 ) && (!isset($extraParams->isAdmin) || $extraParams->isAdmin === false)) {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $clauseWhere .= " D.demandor IN (" . $extraParams->subordonneesIds . ") ";
        }

        //check if joursFeies is between demandeConge : cas d'une jours ferié declaré ulterieurement
        if ($extraParams != null && isset($extraParams->joursFeies) && $extraParams->joursFeies != null) {
            $clauseWhere .= ($clauseWhere != '') ? " AND " : "";
            $extraParams->joursFeies = date_format($extraParams->joursFeies, 'Y-m-d');
            $clauseWhere .= " (D.dateStart <= '" . $extraParams->joursFeies . "' AND D.dateEnd >= '" . $extraParams->joursFeies . "' AND D.demandeStatus = " . GestionCongeConstant::CONGE_STATUS_VALIDATED . ")";
        }
		
        if ($clauseWhere != '') {
            $qb->add('where', $clauseWhere);
        }

        if (count($params) > 0) {
            //set all query parameters
            foreach ($params as $field => $values) {
                $qb->setParameter($field, $values);
            }
        }
		
        //if sort field exists
        if (isset($extraParams->sortField) && !is_null($extraParams->sortField) && $extraParams->sortField != '') {
            $qb->orderBy($extraParams->sortField, $extraParams->sortDirection);
        } else {
            $qb->orderBy('D.id', 'DESC');
        }
		
        $query = $qb->getQuery();
		
        /*print_r(array('sql' => $query->getSQL(), 'params' => $query->getParameters()));
          die; 
		*/ 
        //$result = $query->getResult();

        return $isQueryToReturn ? $query : $query->getResult();
    }

    /**
     * getTotalPermissionUser
     * @param type $userId
     *
     * @return type
     */
    public function getTotalPermissionUser($userId)
    {
        //$zSql = "SELECT COUNT(d.id) FROM `demande_conge` d LEFT JOIN `type_conge` t ON t.id = d.`type_conge_id` WHERE d.`demande_status` = " . GestionCongeConstant::CONGE_STATUS_VALIDATED . " AND d.`demandor_id` = " . $userId . " AND t.`imputation_type_conge` = " . GestionCongeConstant::PERMISSION_EXCEPTIONNELLE . " AND YEAR(d.date_start) = YEAR(NOW())";
		$zSql = "SELECT SUM(d.total_days) FROM `demande_conge` d LEFT JOIN `type_conge` t ON t.id = d.`type_conge_id` WHERE d.`demande_status` = " . GestionCongeConstant::CONGE_STATUS_VALIDATED . " AND d.`demandor_id` = " . $userId . " AND t.`imputation_type_conge` = " . GestionCongeConstant::PERMISSION_EXCEPTIONNELLE . " AND YEAR(d.date_start) = YEAR(NOW())";

        $qb = $this->getEntityManager()->getConnection()->prepare($zSql);
        $qb->execute();
        $result = $qb->fetchAll(\PDO::FETCH_COLUMN);

        return $result[0];
    }

}
